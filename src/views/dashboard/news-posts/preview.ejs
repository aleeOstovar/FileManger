<div class="mb-4">
  <nav aria-label="breadcrumb">
    <ol class="breadcrumb">
      <li class="breadcrumb-item"><a href="/dashboard">Dashboard</a></li>
      <li class="breadcrumb-item"><a href="/dashboard/news-posts">News Posts</a></li>
      <li class="breadcrumb-item active" aria-current="page">Preview: <%= newsPost.title %></li>
    </ol>
  </nav>
</div>

<div class="card">
  <div class="card-header d-flex justify-content-between align-items-center">
    <h1 class="h3 mb-0 text-truncate" style="max-width: 80%;"><%= newsPost.title %></h1>
    <a href="/dashboard/news-posts/<%= newsPost._id %>/edit" class="btn btn-sm btn-outline-secondary">
      <i class="bi bi-pencil"></i> Edit
    </a>
  </div>
  <div class="card-body">
    <div class="row mb-4">
      <div class="col-md-8">
        <% if (newsPost.thumbnailImage) { %>
          <div class="article-hero mb-4">
            <div class="thumbnail-container text-center">
              <img src="<%= newsPost.thumbnailImage %>" alt="<%= newsPost.title %>" class="thumbnail-image">
              <div class="thumbnail-overlay"></div>
              <h2 class="thumbnail-title"><%= newsPost.title %></h2>
            </div>
          </div>
        <% } %>
        <div dir="rtl" style="text-align: right; line-height: 1.8;" class="article-content">
          <% 
            // Function to extract type and index from key (e.g., 'p0' -> ['p', 0])
            const extractKeyInfo = (key) => {
              // Handle both standard format and k-format (k20 = h2 level 0)
              const standardMatch = key.match(/^([a-zA-Z]+)(\d+)$/);
              const kMatch = key.match(/^k(\d)(\d+)$/);
              
              if (kMatch) {
                return [`h${kMatch[1]}`, parseInt(kMatch[2])]; // k20 -> h2, 0
              } else if (standardMatch) {
                return [standardMatch[1], parseInt(standardMatch[2])]; // p0 -> p, 0
              } else {
                return [key, Infinity];
              }
            };

            const imagesById = {};
            if (newsPost.imagesUrl && Array.isArray(newsPost.imagesUrl)) {
              newsPost.imagesUrl.forEach(img => { imagesById[img.id] = img; });
            }

            if (newsPost.content && typeof newsPost.content === 'object') {
              // Use Object.keys() directly without sorting to preserve original order
              const contentKeys = Object.keys(newsPost.content);

              for (const key of contentKeys) {
                const value = newsPost.content[key];
                const [type] = extractKeyInfo(key);
                
                if (type.startsWith('h')) { // Headings h1-h6
                  const level = type.substring(1);
                  %><%- `<h${level} class="content-heading mb-3 mt-4">${value}</h${level}>` %><% 
                } else if (type === 'p') { // Paragraph
                  %><p class="content-paragraph mb-4"><%= value %></p><% 
                } else if (type === 'blockquote') { // Blockquote
                  %><blockquote class="content-blockquote mb-4" dir="rtl"><%- value %></blockquote><% 
                } else if (type === 'li') { // List item (basic rendering)
                  %><li class="content-list-item mb-2"><%= value %></li><% 
                } else if (type === 'img') { // Image placeholder
                    const placeholderMatch = value.match(/\*\*IMAGE_PLACEHOLDER_(img\d+)\*\*/);
                    if (placeholderMatch) {
                        const imgId = placeholderMatch[1];
                        const imgData = imagesById[imgId];
                        if (imgData) {
                          %>
                          <figure class="figure content-figure text-center my-5 w-100">
                            <img src="<%= imgData.url %>" class="figure-img img-fluid rounded shadow" alt="<%= imgData.caption || 'Image' %>" style="max-width: 85%; height: auto;">
                            <% if (imgData.caption) { %>
                              <figcaption class="figure-caption text-center mt-2 mb-3"><%= imgData.caption %></figcaption>
                            <% } %>
                          </figure>
                          <div class="clearfix"></div>
                          <% 
                        } else {
                          %><p class="text-muted text-center mb-4">[Image not found: <%= imgId %>]</p><% 
                        }
                    } else {
                       %><p class="content-text mb-4"><%= value %></p><% // Fallback if not a placeholder format
                    }
                } else { // Fallback for unknown types
                   %><p class="content-text mb-4"><%= value %></p><% 
                }
              } // end for loop
            } else if (typeof newsPost.content === 'string') {
              // Fallback if content is just a string
              %><p class="content-text mb-4"><%= newsPost.content %></p><% 
            }
          %>
        </div>
      </div>
      <div class="col-md-4">
        <div class="border p-3 rounded bg-light">
          <h5 class="mb-3">Details</h5>
          <p><strong>Status:</strong> <span class="badge bg-<%= newsPost.status === 'published' ? 'success' : (newsPost.status === 'draft' ? 'warning' : 'secondary') %>"><%= newsPost.status %></span></p>
          <p><strong>Creator:</strong> <%= newsPost.creator || 'N/A' %></p>
          <% if (newsPost.sourceUrl) { %>
            <p><strong>Source URL:</strong> <a href="<%= newsPost.sourceUrl %>" target="_blank" rel="noopener noreferrer"><%= newsPost.sourceUrl.substring(0, 50) %>...</a></p>
          <% } %>
          <p><strong>Source Date:</strong> <%= newsPost.sourceDate ? new Date(newsPost.sourceDate).toLocaleDateString() : 'N/A' %></p>
          <p><strong>Created At:</strong> <%= new Date(newsPost.createdAt).toLocaleString() %></p>
          <p><strong>Updated At:</strong> <%= new Date(newsPost.updatedAt).toLocaleString() %></p>
          <% if (newsPost.tags && newsPost.tags.length > 0) { %>
            <p><strong>Tags:</strong> 
              <% newsPost.tags.forEach(tag => { %>
                <span class="badge bg-info me-1"><%= tag %></span>
              <% }) %>
            </p>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  blockquote {
    border-right: 5px solid #eee;
    padding-right: 15px;
    margin-right: 0;
    margin-left: 0;
    font-style: italic;
    color: #666;
    background-color: rgba(0,0,0,0.03);
    padding: 1.2rem 1.5rem;
    border-radius: 4px;
  }
  
  .article-content {
    font-family: 'Tahoma', 'Arial', sans-serif;
  }
  
  /* Thumbnail styling */
  .article-hero {
    position: relative;
    margin-bottom: 2rem;
    width: 100%;
  }
  
  .thumbnail-container {
    position: relative;
    width: 100%;
    height: 350px;
    overflow: hidden;
    border-radius: 8px;
    box-shadow: 0 8px 20px rgba(0,0,0,0.15);
  }
  
  .thumbnail-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }
  
  .thumbnail-container:hover .thumbnail-image {
    transform: scale(1.03);
  }
  
  .thumbnail-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(0deg, rgba(0,0,0,0.7) 0%, rgba(0,0,0,0.3) 50%, rgba(0,0,0,0.1) 100%);
  }
  
  .thumbnail-title {
    position: absolute;
    bottom: 20px;
    width: 100%;
    padding: 0 20px;
    color: white;
    font-weight: 700;
    font-size: 1.8rem;
    text-align: center;
    text-shadow: 1px 1px 3px rgba(0,0,0,0.6);
    z-index: 2;
    direction: rtl;
  }
  
  .content-heading {
    font-weight: 700;
    color: #333;
    position: relative;
    padding-bottom: 0.5rem;
    display: block;
    width: 100%;
    clear: both;
  }
  
  .content-heading::after {
    content: '';
    position: absolute;
    bottom: 0;
    right: 0;
    width: 50px;
    height: 3px;
    background-color: #0d6efd;
    border-radius: 2px;
  }
  
  .content-paragraph {
    text-align: justify;
    line-height: 1.9;
  }
  
  .content-figure {
    display: block;
    clear: both;
    width: 100%;
  }
  
  .content-figure img {
    transition: transform 0.3s ease;
  }
  
  .content-figure img:hover {
    transform: scale(1.02);
  }
  
  figure {
    margin-bottom: 2rem;
    clear: both;
    width: 100%;
  }
  
  figure img {
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    cursor: pointer;
  }
  
  .figure-caption {
    font-size: 0.9rem;
    color: #666;
    font-style: italic;
  }
  
  .clearfix {
    clear: both;
    display: block;
    width: 100%;
  }
  
  /* Lightbox Styles */
  .image-lightbox {
    display: none;
    position: fixed;
    z-index: 9999;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.65);
    backdrop-filter: blur(5px);
    overflow: hidden;
    transition: opacity 0.3s ease;
    opacity: 0;
  }
  
  .lightbox-active {
    display: flex;
    opacity: 1;
    justify-content: center;
    align-items: center;
  }
  
  .lightbox-img-container {
    position: relative;
    max-width: 90%;
    max-height: 90%;
    text-align: center;
    animation: fadeIn 0.3s ease;
  }
  
  .lightbox-img {
    max-width: 100%;
    max-height: 90vh;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    border-radius: 4px;
    transition: transform 0.3s ease;
    cursor: zoom-in;
  }
  
  .lightbox-img.zoomed {
    cursor: zoom-out;
    transform: scale(1.5);
  }
  
  .lightbox-caption {
    position: absolute;
    bottom: -40px;
    left: 0;
    width: 100%;
    padding: 10px;
    color: white;
    text-align: center;
    font-style: italic;
  }
  
  .lightbox-close {
    position: absolute;
    top: 20px;
    right: 20px;
    font-size: 30px;
    color: white;
    cursor: pointer;
    width: 40px;
    height: 40px;
    background-color: rgba(0, 0, 0, 0.5);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
  }
  
  .lightbox-close:hover {
    background-color: rgba(255, 255, 255, 0.2);
  }
  
  .zoom-controls {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 15px;
    background-color: rgba(0, 0, 0, 0.5);
    padding: 8px 15px;
    border-radius: 30px;
    z-index: 10;
  }
  
  .zoom-control {
    color: white;
    cursor: pointer;
    width: 30px;
    height: 30px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 20px;
    background-color: rgba(255, 255, 255, 0.1);
    border-radius: 50%;
    transition: background-color 0.2s ease;
    user-select: none;
  }
  
  .zoom-control:hover {
    background-color: rgba(255, 255, 255, 0.3);
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: scale(0.95); }
    to { opacity: 1; transform: scale(1); }
  }
</style>

<!-- Lightbox Modal Container -->
<div id="image-lightbox" class="image-lightbox">
  <div class="lightbox-close">&times;</div>
  <div class="lightbox-img-container">
    <img class="lightbox-img" src="" alt="Enlarged Image">
    <div class="lightbox-caption"></div>
  </div>
  <div class="zoom-controls">
    <div class="zoom-control zoom-out">−</div>
    <div class="zoom-control zoom-in">+</div>
  </div>
</div>

<!-- Add JavaScript for lightbox functionality -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get all content images
    const contentImages = document.querySelectorAll('.content-figure img, .figure-img');
    const lightbox = document.getElementById('image-lightbox');
    const lightboxImg = lightbox.querySelector('.lightbox-img');
    const lightboxCaption = lightbox.querySelector('.lightbox-caption');
    const lightboxClose = lightbox.querySelector('.lightbox-close');
    const zoomIn = lightbox.querySelector('.zoom-in');
    const zoomOut = lightbox.querySelector('.zoom-out');
    
    // Current zoom level
    let currentZoom = 1;
    const zoomStep = 0.25;
    const maxZoom = 3;
    const minZoom = 0.5;
    
    // Add click event to images
    contentImages.forEach(img => {
      img.addEventListener('click', function() {
        // Get image source and caption
        const imgSrc = this.src;
        const caption = this.closest('figure').querySelector('.figure-caption');
        const captionText = caption ? caption.textContent : '';
        
        // Reset zoom
        currentZoom = 1;
        lightboxImg.style.transform = `scale(${currentZoom})`;
        
        // Set lightbox content
        lightboxImg.src = imgSrc;
        lightboxCaption.textContent = captionText;
        
        // Show lightbox
        lightbox.classList.add('lightbox-active');
        document.body.style.overflow = 'hidden'; // Prevent scrolling
      });
    });
    
    // Toggle zoom on image click
    lightboxImg.addEventListener('click', function(e) {
      e.stopPropagation();
      if (this.classList.contains('zoomed')) {
        // Reset zoom
        currentZoom = 1;
        this.style.transform = `scale(${currentZoom})`;
        this.classList.remove('zoomed');
      } else {
        // Zoom in
        currentZoom = 1.5;
        this.style.transform = `scale(${currentZoom})`;
        this.classList.add('zoomed');
      }
    });
    
    // Zoom controls
    zoomIn.addEventListener('click', function(e) {
      e.stopPropagation();
      if (currentZoom < maxZoom) {
        currentZoom += zoomStep;
        lightboxImg.style.transform = `scale(${currentZoom})`;
      }
    });
    
    zoomOut.addEventListener('click', function(e) {
      e.stopPropagation();
      if (currentZoom > minZoom) {
        currentZoom -= zoomStep;
        lightboxImg.style.transform = `scale(${currentZoom})`;
      }
    });
    
    // Close lightbox on X click
    lightboxClose.addEventListener('click', closeLightbox);
    
    // Close lightbox on click outside image
    lightbox.addEventListener('click', function(e) {
      if (e.target === lightbox) {
        closeLightbox();
      }
    });
    
    // Close on escape key
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && lightbox.classList.contains('lightbox-active')) {
        closeLightbox();
      }
    });
    
    function closeLightbox() {
      lightbox.classList.remove('lightbox-active');
      document.body.style.overflow = 'auto'; // Re-enable scrolling
      
      // Reset zoom
      currentZoom = 1;
      lightboxImg.style.transform = `scale(${currentZoom})`;
      lightboxImg.classList.remove('zoomed');
      
      // Clear the image source after animation completes
      setTimeout(() => {
        if (!lightbox.classList.contains('lightbox-active')) {
          lightboxImg.src = '';
        }
      }, 300);
    }
  });
</script> 