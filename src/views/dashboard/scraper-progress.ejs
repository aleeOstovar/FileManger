<!-- Scraping Progress Page -->
<div class="container-fluid px-4">
    <h1 class="mt-4">Scraping Progress: <%= scraper.name %></h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/dashboard">Dashboard</a></li>
        <li class="breadcrumb-item"><a href="/dashboard/scraper">News Scraper</a></li>
        <li class="breadcrumb-item active">Progress</li>
    </ol>

    <!-- Progress Summary Card -->
            <div class="card mb-4">
                <div class="card-header">
            <i class="fas fa-tasks me-1"></i>
            Current Status
                </div>
                <div class="card-body">
            <h4 id="statusTitle"><%= initialProgress.message || 'Initializing...' %></h4>
            <div class="progress mb-3" style="height: 25px;">
                <div id="progressBar" class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" 
                     style="width: <%= initialProgress.progress || 0 %>%;" 
                     aria-valuenow="<%= initialProgress.progress || 0 %>" 
                     aria-valuemin="0" aria-valuemax="100">
                            <span id="progressText"><%= initialProgress.progress || 0 %>%</span>
                        </div>
                    </div>
            <p id="statusMessage" class="text-muted"><%= initialProgress.details && initialProgress.details.message ? initialProgress.details.message : 'Waiting for updates...' %></p>
            
            <!-- Action Buttons -->
            <div id="actionButtons" class="mt-3">
                <button id="stopBtn" class="btn btn-warning me-2" style="display: <%= initialProgress.status === 'running' ? 'inline-block' : 'none' %>;">
                    <i class="fas fa-stop me-1"></i> Stop Scraping
                </button>
                <a href="/dashboard/scraper" id="backBtn" class="btn btn-secondary" style="display: <%= initialProgress.status !== 'running' ? 'inline-block' : 'none' %>;">
                    <i class="fas fa-arrow-left me-1"></i> Back to Scrapers
                </a>
                 <a href="/dashboard/news-posts" id="viewArticlesBtn" class="btn btn-primary" style="display: <%= initialProgress.status === 'complete' ? 'inline-block' : 'none' %>;">
                    <i class="fas fa-newspaper me-1"></i> View Scraped Articles
                </a>
                            </div>
                        </div>
                    </div>

    <!-- Detailed Steps/Logs Card -->
                    <div class="card mb-4">
                        <div class="card-header">
            <i class="fas fa-stream me-1"></i>
            Detailed Steps & Logs
                        </div>
                        <div class="card-body">
            <!-- Step Indicators (Simplified) -->
            <div class="row mb-3 text-center">
                <div class="col"><span id="stepInit" class="badge rounded-pill bg-secondary">Initialize</span></div>
                <div class="col"><span id="stepGettingNewsList" class="badge rounded-pill bg-secondary">Get List</span></div>
                <div class="col"><span id="stepScrapingArticles" class="badge rounded-pill bg-secondary">Scrape Articles</span></div>
                <div class="col"><span id="stepProcessingHtml" class="badge rounded-pill bg-secondary">Process HTML</span></div>
                <div class="col"><span id="stepSavingProcessedItems" class="badge rounded-pill bg-secondary">Save Data</span></div>
                <div class="col"><span id="stepComplete" class="badge rounded-pill bg-secondary">Complete</span></div>
                    </div>

            <!-- Log Output / Detailed Messages -->
            <div id="logOutput" class="bg-light p-3 rounded" style="max-height: 300px; overflow-y: auto; font-family: monospace; font-size: 0.9em;">
                <p>Waiting for progress updates...</p>
                <!-- Logs will be appended here by JavaScript -->
                    </div>

             <!-- Final Summary (Shown on Complete/Error) -->
            <div id="finalSummary" class="mt-3" style="display: none;">
                <!-- Summary details will be populated here -->
            </div>
        </div>
    </div>
</div>

<!-- Hidden data for JavaScript -->
<div id="scraper-progress-data" 
     data-scraper-id="<%= scraper.id %>" 
     data-job-id="<%= jobId %>" 
     data-api-url="<%= scraperApiUrl %>"
     data-initial-progress='<%= JSON.stringify(initialProgress) %>'>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
    const progressDataElem = document.getElementById('scraper-progress-data');
    const scraperId = progressDataElem.dataset.scraperId;
    const jobId = progressDataElem.dataset.jobId;
    const apiUrl = progressDataElem.dataset.apiUrl;
    let initialProgress;
    try {
        initialProgress = JSON.parse(progressDataElem.dataset.initialProgress);
    } catch (e) {
        console.error("Error parsing initial progress data:", e);
        initialProgress = { status: 'error', message: 'Error loading initial state', progress: 0, stage:'error', details: {} };
    }
        
        // Elements
        const progressBar = document.getElementById('progressBar');
        const progressText = document.getElementById('progressText');
        const statusTitle = document.getElementById('statusTitle');
        const statusMessage = document.getElementById('statusMessage');
    const stopBtn = document.getElementById('stopBtn');
    const backBtn = document.getElementById('backBtn');
        const viewArticlesBtn = document.getElementById('viewArticlesBtn');
    const logOutput = document.getElementById('logOutput');
    const finalSummary = document.getElementById('finalSummary');
    const stepElements = {
        init: document.getElementById('stepInit'),
        getting_news_list: document.getElementById('stepGettingNewsList'),
        scraping_articles: document.getElementById('stepScrapingArticles'),
        processing_html: document.getElementById('stepProcessingHtml'),
        saving_processed_items: document.getElementById('stepSavingProcessedItems'),
        complete: document.getElementById('stepComplete')
    };

    let pollInterval = null;
    let isCompleted = false;
    let currentStage = 'init';
    let lastLogMessage = '';

    // --- Function Definitions ---

    function stopPolling() {
        console.log("Attempting to stop polling. Interval ID:", pollInterval);
        if (pollInterval) {
            clearInterval(pollInterval);
            pollInterval = null;
            console.log("Polling stopped.");
        } else {
            console.log("Polling interval already null or not set.");
        }
    }

    function updateUI(data) {
        try {
            if (!data || typeof data !== 'object') {
                console.error("Invalid progress data received:", data);
                data = { is_scraping: false, status: 'error', message: 'Invalid data received from server', progress: progressBar ? progressBar.getAttribute('aria-valuenow') : 0, stage:'error', details: { error: 'Invalid data format' } };
            }
            
            const progress = Math.max(0, Math.min(100, data.progress || 0));
            const status = data.status || 'unknown';
            const apiMessage = data.message || (status === 'running' ? 'Processing...' : 'Waiting...');
            const stage = data.stage || getStageFromProgress(progress);
            currentStage = stage;
            const details = data.details || {};

            if (progressBar && progressText) {
                progressBar.style.width = `${progress}%`;
                progressBar.setAttribute('aria-valuenow', progress);
                progressText.textContent = `${progress}%`;
                progressBar.classList.toggle('progress-bar-animated', status === 'running');
                progressBar.classList.toggle('bg-success', status === 'complete');
                progressBar.classList.toggle('bg-danger', status === 'error' || status === 'failed');
                progressBar.classList.toggle('bg-warning', status === 'stopped');
            } else {
                console.warn("Progress bar elements not found");
            }

            if (statusTitle) statusTitle.textContent = getStatusTitle(status);
            else console.warn("Status title element not found");
            if (statusMessage) statusMessage.textContent = apiMessage;
            else console.warn("Status message element not found");

            const detailMessage = details.message || '';
            const combinedMessage = detailMessage && detailMessage !== apiMessage ? `${apiMessage} - ${detailMessage}` : apiMessage;
            appendLog(combinedMessage, status);
            if(details.error) {
                 appendLog(`Error Detail: ${details.error}`, 'error');
            }

            updateStepIndicators(currentStage, status);

            if (stopBtn) stopBtn.style.display = status === 'running' ? 'inline-block' : 'none';
            if (backBtn) backBtn.style.display = status !== 'running' ? 'inline-block' : 'none';
            if (viewArticlesBtn) viewArticlesBtn.style.display = status === 'complete' ? 'inline-block' : 'none';

            const finalStates = ['complete', 'error', 'failed', 'stopped'];
            const isStillScraping = typeof data.is_scraping === 'boolean' ? data.is_scraping : (status === 'running'); 
            
            if (!isCompleted && (finalStates.includes(status) || !isStillScraping)) { 
                const finalStatus = finalStates.includes(status) ? status : 'complete'; 
                console.log(`Final state detected: ${finalStatus}, isCompleted currently ${isCompleted}`);
                isCompleted = true;
                stopPolling(); 
                
                progressBar?.classList.remove('progress-bar-animated');
                
                if (finalStatus === 'complete' && progressBar) {
                    progressBar.style.width = `100%`;
                    progressBar.setAttribute('aria-valuenow', 100);
                    if(progressText) progressText.textContent = `100%`;
                    progressBar.classList.add('bg-success');
                    progressBar.classList.remove('bg-primary', 'bg-danger', 'bg-warning');
                }
                showFinalSummary(details, finalStatus);
                updateStepIndicators('complete', finalStatus);
            } else if (isStillScraping) {
                 if(finalSummary) finalSummary.style.display = 'none';
            }
        } catch (uiError) {
            console.error("Error inside updateUI:", uiError);
            appendLog(`Frontend UI Error: ${uiError.message}`, 'error');
            if (!isCompleted) {
                 isCompleted = true; 
                 stopPolling();
             }
        }
    }

    function getStatusTitle(status) {
        switch (status) {
            case 'running': return 'Scraping in Progress';
            case 'complete': return 'Scraping Complete';
            case 'error':
            case 'failed': return 'Scraping Failed';
            case 'stopped': return 'Scraping Stopped';
            case 'pending': return 'Scraping Pending';
            default: return 'Processing...';
        }
    }

    function appendLog(message, level = 'info') {
        if (!logOutput || message === lastLogMessage) return; 
        
        lastLogMessage = message; 
        const p = document.createElement('p');
        const timestamp = new Date().toLocaleTimeString();
        p.innerHTML = `<code>[${timestamp}]</code> ${message}`;
        if (level === 'error' || level === 'failed') p.classList.add('text-danger');
        else if (level === 'warning' || level === 'stopped') p.classList.add('text-warning');
        else p.classList.add('text-muted');
        
        logOutput.insertBefore(p, logOutput.firstChild);
        
        const maxLogs = 100;
        while (logOutput.childElementCount > maxLogs) {
            logOutput.removeChild(logOutput.lastChild);
        }
    }

    function updateStepIndicators(currentStage, status) {
        const stagesOrder = ['init', 'getting_news_list', 'scraping_articles', 'processing_html', 'saving_processed_items', 'complete'];
        const currentIndex = stagesOrder.indexOf(currentStage);

        stagesOrder.forEach((stage, index) => {
            const element = stepElements[stage];
            if (element) {
                element.classList.remove('bg-primary', 'bg-success', 'bg-danger', 'bg-secondary', 'bg-warning');
                if (index < currentIndex) {
                    element.classList.add('bg-success');
                } else if (index === currentIndex) {
                    if (status === 'running') element.classList.add('bg-primary'); 
                    else if (status === 'complete') element.classList.add('bg-success');
                    else if (status === 'error' || status === 'failed') element.classList.add('bg-danger');
                    else if (status === 'stopped') element.classList.add('bg-warning'); 
                     else element.classList.add('bg-secondary');
                } else {
                    element.classList.add('bg-secondary');
                }
            }
        });

        if (stepElements.complete) {
             if (status === 'complete') stepElements.complete.className = 'badge rounded-pill bg-success';
             else if (status === 'error' || status === 'failed') stepElements.complete.className = 'badge rounded-pill bg-danger';
             else if (status === 'stopped') stepElements.complete.className = 'badge rounded-pill bg-warning';
             else if (currentIndex < stagesOrder.indexOf('complete')) stepElements.complete.className = 'badge rounded-pill bg-secondary';
        }
    }

    function showFinalSummary(details, status) {
        if (!finalSummary || !details) return;
        let summaryHtml = '';
        if (status === 'complete') {
            summaryHtml = `
                <div class="alert alert-success">
                    <h5><i class="fas fa-check-circle me-2"></i> Scraping Completed Successfully</h5>
                    <ul class="list-unstyled mb-0 mt-2">
                        <li><strong>Total articles found:</strong> ${details.scraped || details.articles_found || 'N/A'}</li>
                        <li><strong>Articles saved to database:</strong> ${details.saved || details.articles_processed || 'N/A'}</li>
                        <li><strong>Errors encountered:</strong> ${details.errors || 0}</li>
                        <li><strong>Total duration:</strong> ${details.duration || 'N/A'}</li>
                    </ul>
                </div>`;
        } else if (status === 'error' || status === 'failed') {
            summaryHtml = `
                <div class="alert alert-danger">
                    <h5><i class="fas fa-exclamation-triangle me-2"></i> Scraping Failed</h5>
                    <p>An error occurred during the scraping process.</p>
                    ${details.error ? `<p><strong>Error:</strong> ${details.error}</p>` : ''}
                </div>`;
        } else if (status === 'stopped') {
             summaryHtml = `
                <div class="alert alert-warning">
                    <h5><i class="fas fa-stop-circle me-2"></i> Scraping Stopped</h5>
                    <p>The scraping process was stopped by the user.</p>
                </div>`;
        }
        if(finalSummary) {
             finalSummary.innerHTML = summaryHtml;
             finalSummary.style.display = 'block';
        }
    }

    function stopScraping() {
        if (!confirm('Are you sure you want to stop this scraping job?')) return;
        
        const url = `${apiUrl}/api/v1/monitoring/stop?source=${scraperId}`;
        fetch(url, { method: 'POST' })
            .then(response => response.json())
            .then(data => {
                appendLog('Stop request sent.', 'warning');
                updateUI({ is_scraping: false, status: 'stopped', message: 'Scraping stopped by user.', progress: progressBar ? progressBar.getAttribute('aria-valuenow') : 0, stage: currentStage, details: {} });
                if (!isCompleted) { isCompleted = true; stopPolling(); }
            })
            .catch(error => {
                console.error('Error stopping scraping:', error);
                appendLog(`Failed to stop scraping: ${error.message}`, 'error');
            });
    }
    
    function mapApiStageToUiStage(apiStage) {
        const stageMap = {
            'fetching_list': 'getting_news_list', 
        };
        return stageMap[apiStage] || apiStage;
    }

    function getStageFromProgress(progress) {
        progress = progress || 0;
        if (progress < 10) return 'init';
        if (progress < 30) return 'getting_news_list';
        if (progress < 60) return 'scraping_articles';
        if (progress < 90) return 'processing_html';
        if (progress < 100) return 'saving_processed_items';
        return 'complete';
    }

    // --- Initialization ---
    try {
        if(logOutput) logOutput.innerHTML = '';
        appendLog('Initializing progress tracking...');
        updateUI(initialProgress); 
        isCompleted = initialProgress.status === 'complete' || initialProgress.status === 'error' || initialProgress.status === 'failed';
    } catch (initError) {
        console.error("Error during initial UI update:", initError);
        appendLog(`Frontend Error on Init: ${initError.message}`, 'error');
        isCompleted = true;
    }
    
    if (!isCompleted) {
        pollInterval = setInterval(pollProgress, 3000);
    } else {
        console.log("Initial state is completed, not starting polling.");
    }

    // Event listeners
    if (stopBtn) {
        stopBtn.addEventListener('click', stopScraping);
    }

    // Cleanup on page unload
    window.addEventListener('beforeunload', () => {
        stopPolling(); 
    });
    });
</script> 